package hw03;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class DealKim extends Application {
	Random rand = new Random();
	Scene scene;
	Stage st;
	VBox root;
	
	
	List<Double> moneyTableList;
	List<Label> suitcaseList = new ArrayList<>();
	List<Integer> suitcaseMoneyList = new ArrayList<>();
	Set<Integer> visited = new HashSet<>();
	Set<Integer> removedSuitcaseIdx = new HashSet<>();
	Map<Label, Integer> suitcaseMap;
	
	boolean chosenSuitcase = false;
	int chosenSuitcaseIdx = 0;
	int suitcaseLeft = 10;
	double offer;
	boolean dealChoice = false;
	boolean promptDealChoice = false;
	
	Label offerLabel;
	Label prompt;
	Label chosenSuitcaseOutput;
	
	
	public static void main(String[] args) {
		launch(args);
	}

	public void start(Stage stage) {
		root = new VBox();
		stage.setTitle("Deal or No Deal");
		scene = new Scene(root, 700,700);
		stage.setScene(scene);
		stage.show();
		st = stage;
		
		offer = 0;
		Dealer dealerBox = new Dealer();
		moneyTableList = new ArrayList<>();
		
		MoneyTable moneytable = new MoneyTable();
		
		ChosenSuitcase io = new ChosenSuitcase();
		
		Suitcase suitcases = new Suitcase();
		
		DealButtons dealbuttons = new DealButtons();
		
		root.getChildren().addAll(dealerBox, moneytable, io, suitcases, dealbuttons);
		
		
	}
	
	public class Dealer extends GridPane {
		
		public Dealer(){
			offer = 0;
			setPrefHeight(100);
			setPadding(new Insets(10));
			
			
			Label label = new Label();
			label.setText("Dealer's Offer: ");
			label.setStyle("-fx-font-size:44px;");
			
			offerLabel = new Label();
			offerLabel.setText("");
			offerLabel.setStyle("-fx-font-size:44px;");
			
			add(label, 0, 0);
			add(offerLabel, 1, 0);
		}
	}
	
	public class MoneyTable extends GridPane {
		List<Double> moneyList;
		List<Label> moneyLabel = new ArrayList<>();
		String style = "-fx-font-size:20px; -fx-border-color:black; -fx-padding: 5px 6px;";
		public MoneyTable() {
			//this.moneyList = moneyList;
			
			//setPrefWidth(500);
			//setPrefHeight(200);
			setPadding(new Insets(5));
			setHgap(11);
			setVgap(10);
			
			String[] amounts = {"$1", "$5", "$10", "$100", "$1000", "$5000",
					"$10K", "$100K", "$500K", "$1M"};
			for (int i = 0; i < 1; i++) {
				for (int j = 0; j < amounts.length; j++) {
					Label label = new Label(amounts[j]);
					label.setStyle(style);
					moneyLabel.add(label);
					add(label, j, 0);
				}
				
			}
			
			//moneyLabel.get(0).setStyle(style + " -fx-background-color:pink;");
			
		
		}
	}
	public class ChosenSuitcase extends GridPane {
		String style0 = "-fx-font-size:20px; -fx-padding: 20px 10px;";
		public ChosenSuitcase() {
			setPadding(new Insets(10));
			setHgap(20);
			setVgap(10);
			prompt = new Label();
			prompt.setText("Choose Your Suitcase");
			prompt.setStyle(style0);
			add(prompt, 0,0);
			
			chosenSuitcaseOutput = new Label();
			chosenSuitcaseOutput.setText("");
			chosenSuitcaseOutput.setStyle(style0);
			add(chosenSuitcaseOutput, 1,0);
			
			
		}
		
		
	}
	
	public class Suitcase extends GridPane {
		
		String style = "-fx-font-size:20px; -fx-border-color: black; -fx-border-width: 2px; -fx-padding: 20px 10px;";
		String focusstyle = "-fx-font-size:20px; -fx-border-color: pink; -fx-border-width: 2px; -fx-padding: 20px 10px;";
		public Suitcase() {
			suitcaseMap = new HashMap<>();
			
			setPadding(new Insets(10));
			setHgap(20);
			setVgap(10);
			
			int[] assignedamt = {1,5,10,100,1000,5000,10000,100000,500000,1000000};
			int randomIdx = rand.nextInt(10);
			//visited.add(randomIdx);
			for (int i = 0; i < 1; i++) {
				for (int j = 0; j < 10; j++) {
					Label box = new Label();
					box.setText("Suitcase "+Integer.toString(j+1));
					box.setFocusTraversable(true);
					box.setStyle(style);
					
					while (visited.contains(randomIdx)) {
						randomIdx = rand.nextInt(10);
					}
					visited.add(randomIdx);
					suitcaseMap.put(box, assignedamt[randomIdx]);
					suitcaseList.add(box);
					suitcaseMoneyList.add(assignedamt[randomIdx]);

				}
			}
			
//			int i = 0; 
//			for (Label suitcaseLabel: suitcaseMap.keySet()) {
//				if (i < 5) {
//					add(suitcaseLabel, i, 1);
//					
//				} else if (i >= 5) {
//					add(suitcaseLabel, i-5, 2);
//					
//				}
//				i++;
//			}
			for (int i = 0; i < 5; i++) {
				add(suitcaseList.get(i), i, 1);
			}
			for (int i = 5; i < 10; i++) {
				add(suitcaseList.get(i), i-5, 2);
			}
			
			scene.setOnKeyReleased(e->{
				focusCheck();
			});
			
			
			
			scene.addEventHandler(javafx.scene.input.MouseEvent.MOUSE_CLICKED, (MouseEvent m) -> {
				if (!chosenSuitcase) {
					chosenSuitcase = true;
					chosenSuitcaseIdx = clickAt(m.getX(), m.getY());
					suitcaseLeft--;
					System.out.println("Suitcases Left: " + suitcaseLeft);
					System.out.println("Player chose suitcase: " + chosenSuitcaseIdx);
					prompt.setText("Your Suitcase: ");
					chosenSuitcaseOutput.setText("Suitcase " + (chosenSuitcaseIdx+1));
					
					System.out.println("Player's Suitcase: " + (chosenSuitcaseIdx+1) + " value is " + 
					suitcaseMoneyList.get(chosenSuitcaseIdx));
					
					// display dealer's offer after first pick?
					
					// calculate the dealer's first offer
					double totalLeft = 0;
					for (int i = 0; i < suitcaseMoneyList.size(); i++) {
						if (i != chosenSuitcaseIdx) {
							totalLeft += suitcaseMoneyList.get(i); 
						}
					}
					offer = (totalLeft / suitcaseLeft) * .90;
					offerLabel.setText("$" + Integer.toString((int)offer));
					promptDealChoice = true;
					
					
				} else if (chosenSuitcase && clickAt(m.getX(), m.getY())!= chosenSuitcaseIdx && !promptDealChoice){
					int suitcaseIndex = clickAt(m.getX(), m.getY());
					System.out.println("Want to get rid of this suitcase.");
					System.out.println("Suitcase: " + (suitcaseIndex+1) + " value is " + 
							suitcaseMoneyList.get(suitcaseIndex));
					
					removedSuitcaseIdx.add(suitcaseIndex);
					suitcaseLeft--;
					System.out.println("Suitcases Left: " + suitcaseLeft);
					
					double totalLeft = 0;
					for (int i = 0; i < suitcaseMoneyList.size(); i++) {
						if (i != chosenSuitcaseIdx && removedSuitcaseIdx.contains(i)) {
							totalLeft += suitcaseMoneyList.get(i); 
						}
					}
					
					offer = (totalLeft / suitcaseLeft) * .90;
					offerLabel.setText("$" + Integer.toString((int)offer));
					promptDealChoice = true;
				}
				
			});
		}
		
		public void focusCheck() {
			
//			for (Label suitcaseLabel: suitcaseMap.keySet()) {
//				if (suitcaseLabel.isFocused()) {
//					System.out.println("Focus on Suitcase: " + (i+1));
//					suitcaseLabel.setStyle(focusstyle);
//				} else {
//					suitcaseLabel.setStyle(style);
//				}
//			}
			for (int i = 0; i < 10; i++) {
				Label l = suitcaseList.get(i);
				if (l.isFocused()) {
					System.out.println("Focus on Suitcase: " + (i+1));
					l.setStyle(focusstyle);
				} else {
					l.setStyle(style);
				}
			}
			st.show();
		}
		
		public int clickAt(double x, double y) {
			if (y >= 255 && y <= 320) {
				if (x >= 13.0 && x <= 118) {
					System.out.println("clicked on suitcase 1");
					return 0;
				}
				else if (x >= 144 && x <= 254) {
					// suitcase 2
					System.out.println("clicked on suitcase 2");
					return 1;
				}
				else if (x >= 277 && x <= 386) {
					System.out.println("clicked on suitcase 3");
					return 2;
				}
				else if (x >= 409 && x <= 518) {
					System.out.println("clicked on suitcase 4");
					return 3;
				}
				else if (x >= 542 && x <= 650) {
					System.out.println("clicked on suitcase 5");
					return 4;
				}
			}
			else if (y >= 355 && y <= 403) {
				if (x >= 13.0 && x <= 118) {
					System.out.println("clicked on suitcase 6");
					return 5;
				}
				else if (x >= 144 && x <= 254) {
					// suitcase 2
					System.out.println("clicked on suitcase 7");
					return 6;
				}
				else if (x >= 277 && x <= 386) {
					System.out.println("clicked on suitcase 8");
					return 7;
				}
				else if (x >= 409 && x <= 518) {
					System.out.println("clicked on suitcase 9");
					return 8;
				}
				else if (x >= 542 && x <= 661) {
					System.out.println("clicked on suitcase 10");
					return 9;
				}
			}
			
			return 0;
		}
	}
	
	
	
	public class DealButtons extends GridPane {
		String style = "-fx-font-size:20px; -fx-border-color:black; -fx-padding: 20px 10px;";
		public DealButtons() {
			setPadding(new Insets(70));
			setHgap(150);
			setVgap(10);
			
			Button dealButton = new Button();
			dealButton.setText("DEAL");
			dealButton.setStyle(style);
			dealButton.setPrefWidth(200);
			dealButton.setFocusTraversable(true);
			add(dealButton, 0,0);
			dealButton.setOnAction(e->{
				if (promptDealChoice) {
					System.out.println("Deal Button Pressed when supposed to.");
					promptDealChoice = false;
					dealChoice = true;
					// print out how much money the person earned i guess
				}
				
			});
			
			
			
			Button nodealButton = new Button();
			nodealButton.setText("NO DEAL");
			nodealButton.setStyle(style);
			nodealButton.setPrefWidth(200);
			nodealButton.setFocusTraversable(true);
			add(nodealButton, 1,0);
			nodealButton.setOnAction(e->{
				if (promptDealChoice) {
					System.out.println("No Deal Button Pressed when supposed to.");
					promptDealChoice = false;
					dealChoice = false;
				}
				
			});
			
			scene.addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent ke) -> {
				System.out.println("Filter key code: " + ke.getCode());
				
				if (ke.getCode() == KeyCode.D) {
					if (promptDealChoice) {
						System.out.println("d was pressed when supposed to");
						// same code as dealButton's action
						promptDealChoice = false;
					}
					
					
				} else if (ke.getCode() == KeyCode.N) {
					System.out.println("n was pressed");
					// same code as No deal button's action
				}
			});
		}
		
	}
	
}









